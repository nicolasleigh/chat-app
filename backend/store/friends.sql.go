// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friends.sql

package store

import (
	"context"
)

const acceptRequest = `-- name: AcceptRequest :exec
WITH friend_insert AS (
    INSERT INTO friends (user_a_id, user_b_id, conversation_id)
    VALUES ($1, $2, $3)
    RETURNING conversation_id
),
first_member AS (
    INSERT INTO conversation_members (member_id, conversation_id)
    SELECT $1, conversation_id FROM friend_insert
)
INSERT INTO conversation_members (member_id, conversation_id)
SELECT $2, conversation_id FROM friend_insert
`

type AcceptRequestParams struct {
	UserAID        int64  `json:"user_a_id"`
	MemberID       int64  `json:"member_id"`
	ConversationID *int64 `json:"conversation_id"`
}

func (q *Queries) AcceptRequest(ctx context.Context, arg AcceptRequestParams) error {
	_, err := q.db.Exec(ctx, acceptRequest, arg.UserAID, arg.MemberID, arg.ConversationID)
	return err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (
  is_group
) VALUES (
  false
)
RETURNING id
`

func (q *Queries) CreateConversation(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, createConversation)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRequest = `-- name: CreateRequest :one
INSERT INTO friend_requests (
  sender_id, receiver_id
) VALUES (
  $1, 
  (SELECT id FROM users WHERE email = $2)
)
RETURNING id, sender_id, receiver_id, created_at
`

type CreateRequestParams struct {
	SenderID int64  `json:"sender_id"`
	Email    string `json:"email" validate:"required,email,max=255"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, createRequest, arg.SenderID, arg.Email)
	var i FriendRequest
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRequest = `-- name: DeleteRequest :one
DELETE FROM friend_requests 
WHERE id = $1
RETURNING id, sender_id, receiver_id, created_at
`

func (q *Queries) DeleteRequest(ctx context.Context, id int64) (FriendRequest, error) {
	row := q.db.QueryRow(ctx, deleteRequest, id)
	var i FriendRequest
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.CreatedAt,
	)
	return i, err
}
