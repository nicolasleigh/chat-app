// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :exec
WITH messages_id AS (
    INSERT INTO messages (
        sender_id, conversation_id, type, content
    ) VALUES (
        $1, $2, $3, $4
    )
    RETURNING id
)
UPDATE conversations
SET last_message_id = (SELECT id FROM messages_id)
WHERE conversations.id = $2
`

type CreateMessageParams struct {
	SenderID int64   `json:"sender_id"`
	ID       int64   `json:"id"`
	Type     *string `json:"type"`
	Content  *string `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage,
		arg.SenderID,
		arg.ID,
		arg.Type,
		arg.Content,
	)
	return err
}

const getConversationLastMessage = `-- name: GetConversationLastMessage :one
SELECT sender_id, users.username as sender_username, users.image_url as sender_image_url, content, type 
FROM messages
JOIN users ON users.id = sender_id
WHERE messages.id = $1
`

type GetConversationLastMessageRow struct {
	SenderID       int64   `json:"sender_id"`
	SenderUsername string  `json:"sender_username" validate:"required,min=1,max=100"`
	SenderImageUrl *string `json:"sender_image_url" validate:"required,url"`
	Content        *string `json:"content"`
	Type           *string `json:"type"`
}

func (q *Queries) GetConversationLastMessage(ctx context.Context, id int64) (GetConversationLastMessageRow, error) {
	row := q.db.QueryRow(ctx, getConversationLastMessage, id)
	var i GetConversationLastMessageRow
	err := row.Scan(
		&i.SenderID,
		&i.SenderUsername,
		&i.SenderImageUrl,
		&i.Content,
		&i.Type,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT u.id as user_id, u.username, u.image_url, u.email, m.id as message_id, m.conversation_id as conversation_id ,m.type, m.content, m.created_at FROM messages m
JOIN users u ON u.id = m.sender_id
WHERE conversation_id = $1
ORDER BY m.created_at DESC
`

type GetMessagesRow struct {
	UserID         int64              `json:"user_id"`
	Username       string             `json:"username" validate:"required,min=1,max=100"`
	ImageUrl       *string            `json:"image_url" validate:"required,url"`
	Email          string             `json:"email" validate:"required,email,max=255"`
	MessageID      int64              `json:"message_id"`
	ConversationID int64              `json:"conversation_id"`
	Type           *string            `json:"type"`
	Content        *string            `json:"content"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetMessages(ctx context.Context, conversationID int64) ([]GetMessagesRow, error) {
	rows, err := q.db.Query(ctx, getMessages, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesRow
	for rows.Next() {
		var i GetMessagesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.ImageUrl,
			&i.Email,
			&i.MessageID,
			&i.ConversationID,
			&i.Type,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markReadMessage = `-- name: MarkReadMessage :exec
UPDATE conversation_members 
SET last_seen_message_id = $3
WHERE conversation_id = $1 AND member_id = $2
`

type MarkReadMessageParams struct {
	ConversationID    int64  `json:"conversation_id"`
	MemberID          int64  `json:"member_id"`
	LastSeenMessageID *int64 `json:"last_seen_message_id"`
}

func (q *Queries) MarkReadMessage(ctx context.Context, arg MarkReadMessageParams) error {
	_, err := q.db.Exec(ctx, markReadMessage, arg.ConversationID, arg.MemberID, arg.LastSeenMessageID)
	return err
}
