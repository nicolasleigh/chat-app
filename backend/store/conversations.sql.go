// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: conversations.sql

package store

import (
	"context"
)

const getConversation = `-- name: GetConversation :many
WITH conv AS (
    SELECT id, name, is_group
    FROM conversations 
    WHERE conversations.id = $1
)
SELECT users.id, users.username, users.email, users.image_url, member.last_message_id, conv.name as conversation_name, conv.is_group FROM conversation_members member
JOIN conv ON conv.id = member.conversation_id
JOIN users ON users.id = member.member_id
`

type GetConversationRow struct {
	ID               int64   `json:"id"`
	Username         string  `json:"username" validate:"required,min=1,max=100"`
	Email            string  `json:"email" validate:"required,email,max=255"`
	ImageUrl         *string `json:"image_url" validate:"required,url"`
	LastMessageID    *int64  `json:"last_message_id"`
	ConversationName *string `json:"conversation_name"`
	IsGroup          bool    `json:"is_group"`
}

func (q *Queries) GetConversation(ctx context.Context, id int64) ([]GetConversationRow, error) {
	rows, err := q.db.Query(ctx, getConversation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConversationRow
	for rows.Next() {
		var i GetConversationRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.ImageUrl,
			&i.LastMessageID,
			&i.ConversationName,
			&i.IsGroup,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConversationsByClerkId = `-- name: GetConversationsByClerkId :many
WITH clerk_users AS (
    SELECT id 
    FROM users 
    WHERE users.clerk_id = $1
)
SELECT member.conversation_id FROM conversation_members member
JOIN clerk_users ON clerk_users.id = member.member_id
`

func (q *Queries) GetConversationsByClerkId(ctx context.Context, clerkID string) ([]int64, error) {
	rows, err := q.db.Query(ctx, getConversationsByClerkId, clerkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var conversation_id int64
		if err := rows.Scan(&conversation_id); err != nil {
			return nil, err
		}
		items = append(items, conversation_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
