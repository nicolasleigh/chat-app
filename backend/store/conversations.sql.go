// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: conversations.sql

package store

import (
	"context"
)

const createGroup = `-- name: CreateGroup :exec
WITH 
    clerk_users AS (
        SELECT id 
        FROM users 
        WHERE clerk_id = $1
    ),
    conv AS (
        INSERT INTO conversations (
            name, is_group, group_owner
        ) VALUES (
            $2, true, (SELECT id FROM clerk_users)
        )
        RETURNING id
    )
INSERT INTO conversation_members (
    conversation_id, member_id
) 
SELECT conv.id, member_id
FROM conv, unnest($3::bigint[]) as member_id
UNION
SELECT conv.id, clerk_users.id
FROM conv, clerk_users
`

type CreateGroupParams struct {
	ClerkID string  `json:"clerk_id" validate:"required"`
	Name    *string `json:"name"`
	Column3 []int64 `json:"column_3"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) error {
	_, err := q.db.Exec(ctx, createGroup, arg.ClerkID, arg.Name, arg.Column3)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
WITH clerk_users AS (
    SELECT id 
    FROM users 
    WHERE users.clerk_id = $1
)
DELETE FROM conversations 
WHERE group_owner IN (SELECT id FROM clerk_users)
AND conversations.id = $2
`

type DeleteGroupParams struct {
	ClerkID string `json:"clerk_id" validate:"required"`
	ID      int64  `json:"id"`
}

func (q *Queries) DeleteGroup(ctx context.Context, arg DeleteGroupParams) error {
	_, err := q.db.Exec(ctx, deleteGroup, arg.ClerkID, arg.ID)
	return err
}

const getConversation = `-- name: GetConversation :many
WITH 
    clerk_users AS (
        SELECT id 
        FROM users 
        WHERE users.clerk_id = $1
    ),
    conv AS (
        SELECT id, name, is_group, last_message_id
        FROM conversations 
        WHERE conversations.id = $2
    ),
    current_user_member AS (
        SELECT last_seen_message_id
        FROM conversation_members
        WHERE member_id = (SELECT id FROM clerk_users)
          AND conversation_id = $2
    ),
    current_user_last_seen_time AS (
        SELECT created_at FROM messages
        WHERE messages.id IN (SELECT last_seen_message_id FROM current_user_member)
    ),
    current_user_unseen_count AS (
        SELECT COUNT(*) as unseen_message_count FROM messages
        WHERE created_at > (SELECT created_at FROM current_user_last_seen_time)
        AND messages.conversation_id = $2
    )
SELECT 
    (SELECT id FROM clerk_users) as current_user_id,
    users.id as other_member_id, 
    users.username as other_member_username, 
    users.email as other_member_email, 
    users.image_url as other_member_image_url, 
    member.last_seen_message_id as other_member_last_seen_message_id, 
    -- (SELECT last_seen_message_id FROM current_user_member) as current_user_last_seen_message_id,
    (SELECT unseen_message_count FROM current_user_unseen_count),
    conv.name as conversation_name, 
    conv.is_group,
    conv.id as conversation_id,
    conv.last_message_id
FROM conversation_members member
JOIN conv ON conv.id = member.conversation_id
JOIN users ON users.id = member.member_id
WHERE member.member_id != (SELECT id FROM clerk_users)
  AND member.conversation_id = $2
`

type GetConversationParams struct {
	ClerkID        string `json:"clerk_id" validate:"required"`
	ConversationID int64  `json:"conversation_id"`
}

type GetConversationRow struct {
	CurrentUserID                int64   `json:"current_user_id"`
	OtherMemberID                int64   `json:"other_member_id"`
	OtherMemberUsername          string  `json:"other_member_username" validate:"required,min=1,max=100"`
	OtherMemberEmail             string  `json:"other_member_email" validate:"required,email,max=255"`
	OtherMemberImageUrl          *string `json:"other_member_image_url" validate:"required,url"`
	OtherMemberLastSeenMessageID *int64  `json:"other_member_last_seen_message_id"`
	UnseenMessageCount           int64   `json:"unseen_message_count"`
	ConversationName             *string `json:"conversation_name"`
	IsGroup                      bool    `json:"is_group"`
	ConversationID               int64   `json:"conversation_id"`
	LastMessageID                *int64  `json:"last_message_id"`
}

func (q *Queries) GetConversation(ctx context.Context, arg GetConversationParams) ([]GetConversationRow, error) {
	rows, err := q.db.Query(ctx, getConversation, arg.ClerkID, arg.ConversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConversationRow
	for rows.Next() {
		var i GetConversationRow
		if err := rows.Scan(
			&i.CurrentUserID,
			&i.OtherMemberID,
			&i.OtherMemberUsername,
			&i.OtherMemberEmail,
			&i.OtherMemberImageUrl,
			&i.OtherMemberLastSeenMessageID,
			&i.UnseenMessageCount,
			&i.ConversationName,
			&i.IsGroup,
			&i.ConversationID,
			&i.LastMessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConversationsByClerkId = `-- name: GetConversationsByClerkId :many
WITH clerk_users AS (
    SELECT id 
    FROM users 
    WHERE users.clerk_id = $1
)
SELECT member.conversation_id FROM conversation_members member
JOIN clerk_users ON clerk_users.id = member.member_id
`

func (q *Queries) GetConversationsByClerkId(ctx context.Context, clerkID string) ([]int64, error) {
	rows, err := q.db.Query(ctx, getConversationsByClerkId, clerkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var conversation_id int64
		if err := rows.Scan(&conversation_id); err != nil {
			return nil, err
		}
		items = append(items, conversation_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const leaveGroup = `-- name: LeaveGroup :exec
WITH clerk_users AS (
    SELECT id 
    FROM users 
    WHERE users.clerk_id = $1
)
DELETE FROM conversation_members 
WHERE conversation_members.member_id IN (SELECT id FROM clerk_users)
AND conversation_members.conversation_id = $2
`

type LeaveGroupParams struct {
	ClerkID        string `json:"clerk_id" validate:"required"`
	ConversationID int64  `json:"conversation_id"`
}

func (q *Queries) LeaveGroup(ctx context.Context, arg LeaveGroupParams) error {
	_, err := q.db.Exec(ctx, leaveGroup, arg.ClerkID, arg.ConversationID)
	return err
}
